version: "3.8"

services:
  # Next.js Development Server
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugger
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dashboard_user:dashboard_password@postgres:5432/dashboard_db
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=development-secret-key
      - NEXTAUTH_URL=http://localhost:3000
      - WATCHPACK_POLLING=true
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    restart: unless-stopped
    command: npm run dev
    stdin_open: true
    tty: true

  # PostgreSQL with TimescaleDB (Development)
  postgres:
    image: timescale/timescaledb:2.11-pg15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=dashboard_db
      - POSTGRES_USER=dashboard_user
      - POSTGRES_PASSWORD=dashboard_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - dashboard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d dashboard_db"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Redis Cache (Development)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - dashboard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: ["redis-server", "--appendonly", "yes"]

  # Redis Insight (Development Redis GUI)
  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - "8001:8001"
    networks:
      - dashboard-network
    profiles:
      - tools

  # PgAdmin (Development PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@dashboard.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_LOGIN_BANNER="Dashboard Development Environment"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - dashboard-network
    profiles:
      - tools

  # Mailhog (Development Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - dashboard-network
    profiles:
      - tools

  # Test Database (for testing)
  postgres-test:
    image: timescale/timescaledb:2.11-pg15
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=dashboard_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - dashboard-network
    profiles:
      - testing
    tmpfs:
      - /var/lib/postgresql/data

networks:
  dashboard-network:
    driver: bridge

volumes:
  postgres-dev-data:
    driver: local
  redis-dev-data:
    driver: local
  pgadmin-data:
    driver: local
  postgres-test-data:
    driver: local
