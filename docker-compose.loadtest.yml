# Docker Compose for Load Testing Infrastructure
# Provides isolated environment for comprehensive performance testing

version: "3.8"

services:
  # Load Testing Orchestrator
  load-test-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.loadtest
    container_name: loadtest-orchestrator
    environment:
      - LOAD_TEST_ENV=${LOAD_TEST_ENV:-local}
      - LOAD_TEST_BASE_URL=${LOAD_TEST_BASE_URL:-http://app:3000}
      - LOAD_TEST_MAX_USERS=${LOAD_TEST_MAX_USERS:-10000}
      - LOAD_TEST_DURATION=${LOAD_TEST_DURATION:-1800s}
      - LOAD_TEST_RAMP_UP=${LOAD_TEST_RAMP_UP:-600s}
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
    volumes:
      - ./load-tests:/app/load-tests
      - load-test-reports:/app/load-tests/reports
      - /var/run/docker.sock:/var/run/docker.sock # For Docker-in-Docker scenarios
    networks:
      - loadtest-network
      - dashboard-network # Connect to main application network
    depends_on:
      - k6-master
      - artillery-runner
      - prometheus
      - grafana
    profiles:
      - loadtest

  # K6 Master Node
  k6-master:
    image: grafana/k6:latest
    container_name: k6-master
    ports:
      - "6565:6565" # K6 API server
    environment:
      - K6_OUT=statsd
      - K6_STATSD_ADDR=prometheus-statsd-exporter:9125
      - K6_STATSD_ENABLE_TAGS=true
    volumes:
      - ./load-tests/k6:/scripts
      - load-test-reports:/reports
    command: ["run", "--quiet", "--no-color", "--api-server", "0.0.0.0:6565", "/scripts/config.js"]
    networks:
      - loadtest-network
    profiles:
      - loadtest

  # K6 Worker Nodes (for distributed testing)
  k6-worker-1:
    image: grafana/k6:latest
    container_name: k6-worker-1
    environment:
      - K6_OUT=statsd
      - K6_STATSD_ADDR=prometheus-statsd-exporter:9125
      - K6_WORKER_ID=1
    volumes:
      - ./load-tests/k6:/scripts
    networks:
      - loadtest-network
    profiles:
      - loadtest-distributed

  k6-worker-2:
    image: grafana/k6:latest
    container_name: k6-worker-2
    environment:
      - K6_OUT=statsd
      - K6_STATSD_ADDR=prometheus-statsd-exporter:9125
      - K6_WORKER_ID=2
    volumes:
      - ./load-tests/k6:/scripts
    networks:
      - loadtest-network
    profiles:
      - loadtest-distributed

  # Artillery Runner
  artillery-runner:
    image: node:18-alpine
    container_name: artillery-runner
    working_dir: /app
    environment:
      - LOAD_TEST_BASE_URL=${LOAD_TEST_BASE_URL:-http://app:3000}
      - ENVIRONMENT=${LOAD_TEST_ENV:-local}
    volumes:
      - ./load-tests/artillery:/app/artillery
      - load-test-reports:/app/reports
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
    command: sh -c "npm install -g artillery@latest && tail -f /dev/null"
    networks:
      - loadtest-network
    profiles:
      - loadtest

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: loadtest-prometheus
    ports:
      - "9091:9090" # Different port to avoid conflict with main prometheus
    volumes:
      - ./load-tests/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./load-tests/monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus-loadtest-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
      - "--storage.tsdb.retention.time=30d"
    networks:
      - loadtest-network
      - dashboard-network
    profiles:
      - loadtest
      - monitoring

  # Prometheus StatsD Exporter for K6 metrics
  prometheus-statsd-exporter:
    image: prom/statsd-exporter:latest
    container_name: loadtest-statsd-exporter
    ports:
      - "9102:9102" # Prometheus metrics endpoint
      - "9125:9125/udp" # StatsD endpoint
    volumes:
      - ./load-tests/monitoring/statsd-mapping.yml:/tmp/statsd-mapping.yml
    command:
      - "--statsd.mapping-config=/tmp/statsd-mapping.yml"
      - "--statsd.listen-udp=:9125"
      - "--web.listen-address=:9102"
    networks:
      - loadtest-network
    profiles:
      - loadtest
      - monitoring

  # Grafana for Load Test Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: loadtest-grafana
    ports:
      - "3002:3000" # Different port to avoid conflict with main grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-loadtest123}
      - GF_INSTALL_PLUGINS=grafana-k6-app
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/k6-load-testing.json
    volumes:
      - ./load-tests/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./load-tests/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-loadtest-data:/var/lib/grafana
    networks:
      - loadtest-network
    depends_on:
      - prometheus
    profiles:
      - loadtest
      - monitoring

  # InfluxDB for Time Series Data (Alternative to Prometheus)
  influxdb:
    image: influxdb:2.7-alpine
    container_name: loadtest-influxdb
    ports:
      - "8087:8086" # Different port to avoid conflicts
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=loadtest
      - DOCKER_INFLUXDB_INIT_PASSWORD=loadtest123
      - DOCKER_INFLUXDB_INIT_ORG=loadtest
      - DOCKER_INFLUXDB_INIT_BUCKET=k6
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=loadtest-token-1234567890
    volumes:
      - influxdb-loadtest-data:/var/lib/influxdb2
      - influxdb-loadtest-config:/etc/influxdb2
    networks:
      - loadtest-network
    profiles:
      - loadtest-influx

  # Redis for Load Test Coordination
  redis-loadtest:
    image: redis:7-alpine
    container_name: loadtest-redis
    ports:
      - "6380:6379" # Different port to avoid conflict with main redis
    volumes:
      - redis-loadtest-data:/data
      - ./load-tests/configs/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - loadtest-network
    profiles:
      - loadtest

  # Load Test Data Generator
  data-generator:
    build:
      context: ./load-tests
      dockerfile: Dockerfile.datagen
    container_name: loadtest-datagen
    environment:
      - REDIS_URL=redis://redis-loadtest:6379
      - POSTGRES_URL=postgresql://dashboard_user:dashboard_password@postgres:5432/dashboard_db
    volumes:
      - ./load-tests/data:/app/data
      - load-test-data:/app/generated
    networks:
      - loadtest-network
      - dashboard-network
    profiles:
      - loadtest

  # Load Balancer for Multi-Instance Testing
  nginx-loadtest:
    image: nginx:alpine
    container_name: loadtest-nginx
    ports:
      - "8080:80"
    volumes:
      - ./load-tests/configs/nginx-loadbalancer.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    networks:
      - loadtest-network
      - dashboard-network
    profiles:
      - loadtest-lb

  # Test Result Aggregator
  result-aggregator:
    build:
      context: ./load-tests
      dockerfile: Dockerfile.aggregator
    container_name: loadtest-aggregator
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - INFLUXDB_URL=http://influxdb:8086
      - REDIS_URL=redis://redis-loadtest:6379
    volumes:
      - load-test-reports:/app/reports
      - ./load-tests/utils:/app/utils
    networks:
      - loadtest-network
    profiles:
      - loadtest

  # Performance Baseline Service
  baseline-service:
    build:
      context: ./load-tests
      dockerfile: Dockerfile.baseline
    container_name: loadtest-baseline
    environment:
      - TARGET_URL=${LOAD_TEST_BASE_URL:-http://app:3000}
      - REDIS_URL=redis://redis-loadtest:6379
    volumes:
      - load-test-baselines:/app/baselines
    networks:
      - loadtest-network
      - dashboard-network
    profiles:
      - loadtest

  # Alert Manager for Load Test Notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: loadtest-alertmanager
    ports:
      - "9094:9093"
    volumes:
      - ./load-tests/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-loadtest-data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://localhost:9094"
    networks:
      - loadtest-network
    profiles:
      - loadtest
      - monitoring

# Networks
networks:
  loadtest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  dashboard-network:
    external: true # Connect to existing dashboard network

# Volumes for persistent data
volumes:
  load-test-reports:
    driver: local
  load-test-data:
    driver: local
  load-test-baselines:
    driver: local
  prometheus-loadtest-data:
    driver: local
  grafana-loadtest-data:
    driver: local
  influxdb-loadtest-data:
    driver: local
  influxdb-loadtest-config:
    driver: local
  redis-loadtest-data:
    driver: local
  alertmanager-loadtest-data:
    driver: local

# Health checks and dependencies
x-healthcheck: &default-healthcheck
  test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
